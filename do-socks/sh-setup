#! /bin/bash
# vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker:
#
#   Author: Armen Baghumian <armen@OpenSourceClub.org>
#   License: There is no license, then you are free to do WHAT EVER YOU WANT with
#            this script
#
LOG_NONE=0
LOG_STDOUT=1
LOG_ERROR=2
LOG_INFO=4
LOG_DEBUG=8
LOG_ALL=$(($LOG_STDOUT | $LOG_ERROR | $LOG_INFO | $LOG_DEBUG))

TXTBLD='\e[1m'    # Bold
TXTUND='\e[4m'    # Bold
TXTBLK='\e[0;30m' # Black - Regular
TXTRED='\e[0;31m' # Red
TXTGRN='\e[0;32m' # Green
TXTYLW='\e[0;33m' # Yellow
TXTBLU='\e[0;34m' # Blue
TXTPUR='\e[0;35m' # Purple
TXTCYN='\e[0;36m' # Cyan
TXTWHT='\e[0;37m' # White
BLDBLK='\e[1;30m' # Black - Bold
BLDRED='\e[1;31m' # Red
BLDGRN='\e[1;32m' # Green
BLDYLW='\e[1;33m' # Yellow
BLDBLU='\e[1;34m' # Blue
BLDPUR='\e[1;35m' # Purple
BLDCYN='\e[1;36m' # Cyan
BLDWHT='\e[1;37m' # White
UNDBLK='\e[4;30m' # Black - Underline
UNDRED='\e[4;31m' # Red
UNDGRN='\e[4;32m' # Green
UNDYLW='\e[4;33m' # Yellow
UNDBLU='\e[4;34m' # Blue
UNDPUR='\e[4;35m' # Purple
UNDCYN='\e[4;36m' # Cyan
UNDWHT='\e[4;37m' # White
BAKBLK='\e[40m'   # Black - Background
BAKRED='\e[41m'   # Red
BAKGRN='\e[42m'   # Green
BAKYLW='\e[43m'   # Yellow
BAKBLU='\e[44m'   # Blue
BAKPUR='\e[45m'   # Purple
BAKCYN='\e[46m'   # Cyan
BAKWHT='\e[47m'   # White
TXTRST='\e[0m'    # Text 

check_args_num()
{
    if [ "$1" -lt "$2" ]
    then
        funcname=`caller 0 | awk '{ print $2 }'`
        line=`caller 1 | awk '{ print $1 }'`
        file=`caller 1 | awk '{ print $3 }'`
        echo "$file: line $line: $funcname requires ${2} arguments" >&2
        exit 1
    fi
}

log_init()
{
    if [ "$LOG_FILE" ] && [ -d `dirname "$LOG_FILE"` ] && [ -w `dirname "$LOG_FILE"` ]
    then
        LOG_FD=3
        exec 3>> $LOG_FILE
    else
        # log file does not exist or is not reachable redirect everything to stderr
        LOG_FD=2
    fi

    # default values
    exec 4>/dev/null 8>/dev/null

    (( $LOG_LEVEL & $LOG_STDOUT )) && exec 1>&$LOG_FD
    (( $LOG_LEVEL & $LOG_ERROR ))  && exec 2>&$LOG_FD
    (( $LOG_LEVEL & $LOG_INFO ))   && exec 4>&$LOG_FD
    (( $LOG_LEVEL & $LOG_DEBUG ))  && exec 8>&$LOG_FD
}

log()
{
    # $1 message , $2 log_level
    check_args_num $# 2

    funcname=`caller 0 | awk '{ print $2 }'`

    if [ ! "$LOG_FD" ]
    then
        log_init
    fi

    if [ -t "$2" ]
    then
        # it's stdout so do not prepend date
        echo "$1" >&$2
    else
        echo "$(date) ${funcname}: $1" >&$2
    fi
}

die()
{
    # $1 message
    check_args_num $# 1

    log "$1" $LOG_ERROR
    exit 1
}

remove_empty_directories()
{
    # $1 path
    check_args_num $# 1

    if [ -d $1 ]
    then
        find $1 -depth -type d -empty -exec rmdir {} \;
    fi
}

colored_watch()
{
    # $1 cmd, $2 interval (optional)
    check_args_num $# 1
    
    interval=1
    [ "$2" ] && interval=$2

    # change Internal Field Separator variable to NULL to avoid triming of white spaces
    OIFS=$IFS; IFS=""

    # taken from http://excess.org/article/2009/07/watch1-bash-unicode/
    while true; do
        (echo -en '\033[H'
            CMD="$1"
            bash -c "$CMD" | while read LINE; do
                echo -n "$LINE"
                echo -e '\033[0K'
            done
            echo -en '\033[J') | tac | tac
        sleep "$interval"
    done

    IFS=$OIFS              # Restore original $IFS.
}
