#!/bin/bash
DZEN_HOME="${HOME}/.dzen2"
ICONPATH="${DZEN_HOME}/bitmaps/"
DM_PIPE="${DZEN_HOME}/dmpipe"
FONT="-*-terminus-*-r-normal-*-10-120-*-*-*-*-iso8859-*"
SLEEP=1

function netmon_format()
{
    bytes=$@

    if [ "x$bytes" != "x" ]; then
        if [ $bytes -lt 9999 ]; then
            printf "%5dB" $bytes
        elif [ $bytes -lt 99999999 ]; then
            printf "%5dK" $(echo "$bytes / 1024" | bc)
        elif [ $bytes -lt 999999999999 ]; then
            printf "%5dM" $(echo "$bytes / 1048576" | bc)
        else
            printf "%5dG" $(echo "$bytes / 1073741824" | bc)
        fi
    fi
}

function dzen_netmon()
{
    # (c) 2011, by Armen Baghumian
    #
    # Based on http://dzen.geekmode.org/dwiki/doku.php?id=dzen:network-meter
    # (c) 2007, by Robert Manea

    place=$1
    interface=$2

    if [ "x$interface" == "x" ]; then
        echo "interface could not be empty" >&2
        exit 1
    fi

    interface_icon="^i(${ICONPATH}/net_wired.xbm)"
    cat /proc/net/wireless | grep $interface > /dev/null && interface_icon="^i(${ICONPATH}/wifi_02.xbm)"

    # Here we remember the previous rx/tx counts
    rx_bytes=`cat /sys/class/net/${interface}/statistics/rx_bytes`
    tx_bytes=`cat /sys/class/net/${interface}/statistics/tx_bytes`

    while :; do
    # get new rx/tx counts
    rx_bytes_new=$(cat /sys/class/net/${interface}/statistics/rx_bytes)
    tx_bytes_new=$(cat /sys/class/net/${interface}/statistics/tx_bytes)

    rx_rates=$(echo "($rx_bytes_new - $rx_bytes) / $SLEEP" | bc)
    tx_rates=$(echo "($tx_bytes_new - $tx_bytes) / $SLEEP" | bc)

    rx_rates=$(netmon_format $rx_rates)
    tx_rates=$(netmon_format $tx_rates)

    # print out the rates with some nice formatting
    echo "${place} ^fg(white)${interface_icon}^fg(#777)${tx_rates}^fg(orange3)^i(${ICONPATH}/net_up_03.xbm)^fg(#777)${rx_rates}^fg(#80aa83)^p(3)^i(${ICONPATH}/net_down_03.xbm)^fg()" > $HOME/.dzen2/dmpipe

    # reset old rates
    rx_bytes=$rx_bytes_new
    tx_bytes=$tx_bytes_new

    sleep $SLEEP
    done
}

function spacer()
{
    start="^p(5)"
    # TODO: Removed hardcoded absolute positioning
    test $1 = 0 && start="^pa(815)" # This is the first cell
    echo "${1} ${start}^fg(#777)^ro(1,20)^p(5)^fg()" > $HOME/.dzen2/dmpipe
}

function dzen_datetime()
{
    test "$1x" = "x" && return;

    while :; do

        echo "${1} ^fg(white)^i($HOME/.dzen2/bitmaps/clock.xbm)" $(date  +"%a %b %d %H:%M") "^fg()" > $HOME/.dzen2/dmpipe

        sleep 60
    done
}

function dzen_init()
{
    test ! -d $DZEN_HOME && mkdir -p $DZEN_HOME >/dev/null

    # Create a fifo and launch dzen2

    if [ $(which dmplex) ]
    then
        test ! -f $DM_PIPE && mkfifo $DM_PIPE > /dev/null 2>&1
        tail -f $DM_PIPE | dmplex | dzen2 -dock -x %x -fn ${FONT} -bg "#000" -ta l
    fi
}

function dzen_launcher()
{
    test ! -d $DZEN_HOME && mkdir -p $DZEN_HOME >/dev/null

    # Create a fifo and launch dzen2
    test ! -f $DM_PIPE && mkfifo $DM_PIPE > /dev/null 2>&1

    if [ $(which dmplex) ]
    then
        $(tail -f $DM_PIPE | dmplex | dzen2 -dock -x %x -fn ${FONT} -bg "#000" -ta l)&
    else
        echo "Error: dmplex could not be found." >&2
        exit 1;
    fi

    spacer 0
    cell=1

    for interface in `cat /proc/net/dev | grep -e "[0-9]:" | sed -e "s/\s*\([-a-z0-9_]\+\):\s\+[1-9].*/\1/" | grep -e "^[a-z0-9]\+$"`
    do
        dzen_netmon $cell $interface &
        let "cell+=1"

        spacer $cell
        let "cell+=1"
    done

    dzen_datetime $cell &
    let "cell+=1"
}

dzen_launcher
